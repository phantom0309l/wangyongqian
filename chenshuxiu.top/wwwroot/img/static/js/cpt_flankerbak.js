// Generated by LiveScript 1.4.0
(function(){
  var rand_atom_all, rand_atom_center, cpexchange, rand_seq_gen, listening_time, waiting_time, picvtime, initpic_time, steps, TimeKeeper, pre, root, effect, btn, rvm, bvm, pvm, evm, zilean, step_checkout, begin;
  rand_atom_all = ['l', 'r', 's'];
  rand_atom_center = ['l', 'r'];
  cpexchange = {
    l: "←",
    r: "→",
    s: "—",
    "→": "r",
    "←": "l",
    "—": "s"
  };
  rand_seq_gen = function(){
    var result, res$, i$, x$, ref$, len$;
    res$ = [];
    for (i$ = 0, len$ = (ref$ = [0, 1, 2, 3, 4]).length; i$ < len$; ++i$) {
      x$ = ref$[i$];
      res$.push(rand_atom_all[Math.floor(
      3 * Math.random())]);
    }
    result = res$;
    result[2] = rand_atom_center[Math.floor(
    2 * Math.random())];
    return result;
  };
  listening_time = 1500;
  waiting_time = 1500;
  picvtime = 150;
  initpic_time = 150;
  steps = (function(){
    var i$, x$, ref$, len$, results$ = [];
    for (i$ = 0, len$ = (ref$ = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]).length; i$ < len$; ++i$) {
      x$ = ref$[i$];
      results$.push(rand_seq_gen());
    }
    return results$;
  }()).map(function(x){
    return [
      [true, false][Math.floor(
      2 * Math.random())], x
    ];
  });
  TimeKeeper = (function(){
    TimeKeeper.displayName = 'TimeKeeper';
    var prototype = TimeKeeper.prototype, constructor = TimeKeeper;
    prototype.start_time = 0;
    prototype.begin_time = 0;
    prototype.clicks = [];
    prototype.responses = [];
    prototype.clicked = false;
    prototype.recording = false;
    prototype.listen = function(date){
      this.begin_time = date;
    };
    prototype.capture = function(mole){
      var now, dif;
      now = new Date;
      dif = now - this.begin_time;
      this.clicks.push({
        mole: mole,
        time: now
      });
      if (this.recording) {
        this.responses.push({
          mole: mole,
          time: now,
          delay: dif
        });
        this.recording = false;
        this.clicked = true;
      }
    };
    prototype.step_end = function(){
      if (!this.clicked) {
        this.clicks.push(null);
        this.responses.push(null);
        zilean.recording = false;
      }
    };
    function TimeKeeper(){}
    return TimeKeeper;
  }());
  pre = {
    $id: 'pre',
    cover: true,
    vstr: "开始测试",
    vstr_act: "准备",
    second: "",
    activating: false,
    sinit: function(){
      pvm.second = 3;
    },
    sec2begin: function(){
      var ic;
      ic = setInterval(function(){
        pvm.second -= 1;
        if (pvm.second < 1) {
          pvm.cover = false;
        }
        if (pvm.second < 0) {
          clearInterval(ic);
          begin();
        }
      }, 1000);
    },
    be_activating: function(){
      if (!pvm.activating) {
        pvm.activating = true;
        pvm.sinit();
        pvm.sec2begin();
      }
    }
  };
  root = {
    $id: 'root',
    activating_b: false,
    activating_l: false,
    actstr: "",
    initpic: false,
    fresh_str: function(){
      var result, i$, ref$, len$, x;
      result = "";
      for (i$ = 0, len$ = (ref$ = rvm.activating_l).length; i$ < len$; ++i$) {
        x = ref$[i$];
        result += cpexchange[x];
      }
      rvm.actstr = result;
    },
    init_pic: function(){
      rvm.initpic = true;
      window.setTimeout(function(){
        rvm.initpic = false;
      }, initpic_time);
    },
    step_end: function(){
      if (!this.clicked) {
        this.clicks.push(null);
        this.responses.push(null);
        zilean.recording = false;
      }
    }
  };
  effect = {
    $id: 'effect',
    cover: false,
    all: 0,
    lbtn: 0,
    rbtn: 0,
    dif: 0,
    dif_comp: function(){
      var r, c, i$, ref$, len$, x, that;
      r = 0;
      c = 0;
      for (i$ = 0, len$ = (ref$ = zilean.responses).length; i$ < len$; ++i$) {
        x = ref$[i$];
        if (x && x.delay) {
          r += 1;
          c += x.delay;
        }
      }
      if (that = c / r / 1000) {
        return that.toFixed(3);
      } else {
        return 0;
      }
    },
    btn_comp: function(which){
      var c, i$, ref$, len$, x;
      c = 0;
      for (i$ = 0, len$ = (ref$ = zilean.responses).length; i$ < len$; ++i$) {
        x = ref$[i$];
        if (x && x.mole && x.mole === which) {
          c += 1;
        }
      }
      return c;
    },
    result_gen: function(){
      evm.cover = true;
      evm.all = zilean.clicks.length;
      evm.dif = evm.dif_comp();
      evm.lbtn = evm.btn_comp('l');
      evm.rbtn = evm.btn_comp('r');
    }
  };
  btn = {
    $id: 'btn',
    listening: false,
    kick_mole: function(which){
      zilean.capture(which);
    }
  };
  rvm = avalon.define(root);
  bvm = avalon.define(btn);
  pvm = avalon.define(pre);
  evm = avalon.define(effect);
  zilean = new TimeKeeper;
  step_checkout = function(num){
    var ref$;
    zilean.recording = true;
    bvm.listening = true;
    zilean.clicked = false;
    ref$ = steps[num], rvm.activating_b = ref$[0], rvm.activating_l = ref$[1];
    rvm.fresh_str();
    zilean.listen(new Date);
    window.setTimeout(function(){
      rvm.actstr = "";
    }, picvtime);
    window.setTimeout(function(){
      bvm.listening = false;
      rvm.init_pic();
      zilean.step_end();
    }, listening_time);
  };
  begin = function(){
    var curstep, intervalc;
    zilean.start_time = new Date();
    step_checkout(0);
    curstep = 1;
    intervalc = window.setInterval(function(){
      step_checkout(curstep);
      curstep += 1;
      if (curstep > 11) {
        window.clearInterval(intervalc);
        setTimeout(function(){
          evm.result_gen();
        }, waiting_time + listening_time + 100);
      }
    }, waiting_time + listening_time + 100);
  };
}).call(this);
