// Generated by LiveScript 1.4.0
(function(){
  var g_cases, r_cases, steps, waiting_time, listening_time, TimeKeeper, pre, root, effect, rvm, pvm, evm, zilean, step_checkout, begin;
  g_cases = ["grb", "glb"];
  r_cases = ["rrb", "rlb"];
  steps = [];
  while (steps.length <= 12) {
    if (Math.floor(
    3 * Math.random()) === 0) {
      steps.push(r_cases[Math.floor(
      2 * Math.random())]);
    } else {
      steps.push(g_cases[Math.floor(
      2 * Math.random())]);
    }
  }
  waiting_time = 1000;
  listening_time = 1000;
  TimeKeeper = (function(){
    TimeKeeper.displayName = 'TimeKeeper';
    var prototype = TimeKeeper.prototype, constructor = TimeKeeper;
    prototype.start_time = 0;
    prototype.begin_time = 0;
    prototype.click_times = [];
    prototype.response_times = [];
    prototype.clicked = false;
    prototype.recording = false;
    prototype.listen = function(date){
      this.begin_time = date;
    };
    prototype.capture = function(mole){
      var now, dif;
      now = new Date;
      dif = now - this.begin_time;
      this.click_times.push({
        mole: mole,
        time: now
      });
      if (this.recording) {
        this.response_times.push({
          mole: mole,
          time: now,
          delay: dif
        });
        this.recording = false;
        this.clicked = true;
      }
    };
    prototype.step_end = function(){
      if (!this.clicked) {
        this.click_times.push(null);
        this.response_times.push(null);
        zilean.recording = false;
      }
    };
    function TimeKeeper(){}
    return TimeKeeper;
  }());
  pre = {
    $id: 'pre',
    cover: true,
    vstr: "开始测试",
    vstr_act: "准备",
    second: "",
    activating: false,
    sinit: function(){
      pvm.second = 3;
    },
    sec2begin: function(){
      var ic;
      ic = setInterval(function(){
        pvm.second -= 1;
        if (pvm.second < 1) {
          pvm.cover = false;
        }
        if (pvm.second < 0) {
          clearInterval(ic);
          begin();
        }
      }, 1000);
    },
    be_activating: function(){
      if (!pvm.activating) {
        pvm.activating = true;
        pvm.sinit();
        pvm.sec2begin();
      }
    }
  };
  root = {
    $id: 'root',
    lbc: "sil",
    rbc: "sil",
    color_init: function(){
      rvm.lbc = 'sil';
      rvm.rbc = 'sil';
    },
    color_activate: function(ada){
      switch (ada) {
      case 'rrb':
        rvm.rbc = 'ra';
        break;
      case 'grb':
        rvm.rbc = 'ga';
        break;
      case 'rlb':
        rvm.lbc = 'ra';
        break;
      case 'glb':
        rvm.lbc = 'ga';
      }
    },
    color_infer: function(which, bc){
      if (bc === 'sil') {
        return null;
      }
      if (which === 'left') {
        if (bc === 'ra') {
          return 'rlb';
        } else {
          return 'glb';
        }
      } else {
        if (bc === 'ra') {
          return 'rrb';
        } else {
          return 'grb';
        }
      }
    },
    kick_mole: function(which, bc){
      zilean.capture(rvm.color_infer(which, bc));
    }
  };
  effect = {
    $id: 'effect',
    cover: false,
    all: 0,
    green: 0,
    red: 0,
    dif: 0,
    dif_comp: function(){
      var r, c, i$, ref$, len$, x, that;
      r = 0;
      c = 0;
      for (i$ = 0, len$ = (ref$ = zilean.response_times).length; i$ < len$; ++i$) {
        x = ref$[i$];
        if (x && x.delay) {
          r += 1;
          c += x.delay;
        }
      }
      if (that = c / r / 1000) {
        return that.toFixed(3);
      } else {
        return 0;
      }
    },
    color_comp: function(color){
      var c, i$, ref$, len$, x;
      c = 0;
      for (i$ = 0, len$ = (ref$ = zilean.response_times).length; i$ < len$; ++i$) {
        x = ref$[i$];
        if (x && x.mole && x.mole[0] === color) {
          c += 1;
        }
      }
      return c;
    },
    result_gen: function(){
      evm.cover = true;
      evm.all = zilean.click_times.length;
      evm.dif = evm.dif_comp();
      evm.green = evm.color_comp('g');
      evm.red = evm.color_comp('r');
    }
  };
  rvm = avalon.define(root);
  pvm = avalon.define(pre);
  evm = avalon.define(effect);
  zilean = new TimeKeeper;
  step_checkout = function(num){
    zilean.recording = true;
    zilean.clicked = false;
    rvm.color_activate(steps[num]);
    window.action = steps[num];
    zilean.listen(new Date);
    window.setTimeout(function(){
      rvm.color_init();
      zilean.step_end();
    }, listening_time);
  };
  begin = function(){
    var curstep, intervalc;
    zilean.start_time = new Date();
    step_checkout(0);
    curstep = 1;
    intervalc = window.setInterval(function(){
      step_checkout(curstep);
      curstep += 1;
      if (curstep > 11) {
        window.clearInterval(intervalc);
        setTimeout(function(){
          evm.result_gen();
        }, waiting_time + listening_time);
      }
    }, waiting_time + listening_time);
  };
}).call(this);
