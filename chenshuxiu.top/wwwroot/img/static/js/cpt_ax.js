// Generated by LiveScript 1.4.0
(function(){
  var listening_time, waiting_time, ass_atom, steps, TimeKeeper, pre, root, btn, effect, pvm, rvm, bvm, evm, zilean, step_checkout, begin;
  listening_time = 1500;
  waiting_time = 1500;
  ass_atom = ["B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W"];
  steps = [];
  while (steps.length < 30) {
    if (Math.floor(
    2 * Math.random()) === 0) {
      steps.push('A');
      if (steps.length < 30) {
        if (Math.floor(
        2 * Math.random()) === 0) {
          steps.push('X');
        } else {
          steps.push(ass_atom[Math.floor(
          22 * Math.random())]);
        }
      }
    } else {
      steps.push(ass_atom[Math.floor(
      22 * Math.random())]);
    }
  }
  TimeKeeper = (function(){
    TimeKeeper.displayName = 'TimeKeeper';
    var prototype = TimeKeeper.prototype, constructor = TimeKeeper;
    prototype.start_time = 0;
    prototype.begin_time = 0;
    prototype.clicks = [];
    prototype.responses = [];
    prototype.clicked = false;
    prototype.recording = false;
    prototype.listen = function(date){
      this.begin_time = date;
    };
    prototype.capture = function(mole){
      var now, dif;
      now = new Date;
      dif = now - this.begin_time;
      this.clicks.push({
        mole: mole,
        time: now
      });
      if (this.recording) {
        this.responses.push({
          mole: mole,
          time: now,
          delay: dif
        });
        this.recording = false;
        this.clicked = true;
      }
    };
    prototype.step_end = function(){
      if (!this.clicked) {
        this.clicks.push(null);
        this.responses.push(null);
        zilean.recording = false;
      }
    };
    function TimeKeeper(){}
    return TimeKeeper;
  }());
  pre = {
    $id: 'pre',
    cover: true,
    vstr: "开始测试",
    vstr_act: "准备",
    second: "",
    activating: false,
    sinit: function(){
      pvm.second = 3;
    },
    sec2begin: function(){
      var ic;
      ic = setInterval(function(){
        pvm.second -= 1;
        if (pvm.second < 1) {
          pvm.cover = false;
        }
        if (pvm.second < 0) {
          clearInterval(ic);
          begin();
        }
      }, 1000);
    },
    be_activating: function(){
      if (!pvm.activating) {
        pvm.activating = true;
        pvm.sinit();
        pvm.sec2begin();
      }
    }
  };
  root = {
    $id: 'root',
    vstr: ""
  };
  btn = {
    $id: 'btn',
    listening: false,
    kick_mole: function(which){
      zilean.capture(which);
    }
  };
  effect = {
    $id: 'effect',
    cover: false,
    all: 0,
    lbtn: 0,
    rbtn: 0,
    dif: 0,
    dif_comp: function(){
      var r, c, i$, ref$, len$, x, that;
      r = 0;
      c = 0;
      for (i$ = 0, len$ = (ref$ = zilean.responses).length; i$ < len$; ++i$) {
        x = ref$[i$];
        if (x && x.delay) {
          r += 1;
          c += x.delay;
        }
      }
      if (that = c / r / 1000) {
        return that.toFixed(3);
      } else {
        return 0;
      }
    },
    btn_comp: function(which){
      var c, i$, ref$, len$, x;
      c = 0;
      for (i$ = 0, len$ = (ref$ = zilean.responses).length; i$ < len$; ++i$) {
        x = ref$[i$];
        if (x && x.mole && x.mole === which) {
          c += 1;
        }
      }
      return c;
    },
    result_gen: function(){
      evm.cover = true;
      evm.all = zilean.clicks.length;
      evm.dif = evm.dif_comp();
      evm.lbtn = evm.btn_comp('o');
      evm.rbtn = evm.btn_comp('x');
    }
  };
  pvm = avalon.define(pre);
  rvm = avalon.define(root);
  bvm = avalon.define(btn);
  evm = avalon.define(effect);
  zilean = new TimeKeeper;
  step_checkout = function(num){
    zilean.recording = true;
    bvm.listening = true;
    zilean.clicked = false;
    rvm.vstr = steps[num];
    zilean.listen(new Date);
    window.setTimeout(function(){
      rvm.vstr = "";
    }, 150);
    window.setTimeout(function(){
      bvm.listening = false;
      zilean.step_end();
    }, listening_time);
  };
  begin = function(){
    var curstep, intervalc;
    zilean.start_time = new Date();
    step_checkout(0);
    curstep = 1;
    intervalc = window.setInterval(function(){
      step_checkout(curstep);
      curstep += 1;
      if (curstep > 29) {
        window.clearInterval(intervalc);
        setTimeout(function(){
          evm.result_gen();
        }, listening_time + 150);
      }
    }, listening_time + 150);
  };
}).call(this);
